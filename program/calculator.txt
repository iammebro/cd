Cal.l


%{
 
#include<stdio.h> #include<math.h> #include"y.tab.h"
%}
%%
 



#include<stdio.h> 
#include<math.h> 
#include"y.tab.h"






%%

Cal.y

%{
 
([0-9]+|([0-9]*\.[0-9]+)([eE][-+]?[0-9]+)?) {yylval.dval=atof(yytext); return NUMBER;}
MEM {return MEM;} [\t];
\$ {return 0;}
\n {return yytext[0];}
. {return yytext[0];}
 
#include<stdio.h> #include<math.h> double memvar;
int yyerror(char *s); int yylex();
%}
%union
{
double dval;
}
%token<dval> NUMBER
%token<dval> MEM
%left '-' '+'
%left '*' '/'
%nonassoc UMINUS
%type<dval> expr
%%
start:statement '\n'
|start statement '\n'
 
statement:MEM '=' expr {memvar=$3;}
|expr {printf("answer=%g\n",$1);}
;
expr:expr '+' expr {$$=$1+$3;}
|expr '-' expr { $$=$1-$3; }
|expr '*' expr { $$=$1*$3; }
|expr '/' expr { if($3==0) yyerror("divide by zero"); else
$$=$1/$3;
};
expr:'-' expr %prec UMINUS {$$= -$2;}
|'('expr')' {$$=$2;}
|NUMBER {$$=$1;}
|MEM {$$=memvar;};
%%
int main(void)
{
printf("Enter the expression:"); yyparse();
printf("\n\n"); return 0;
}
int yywrap()
{
return 0;
}
int yyerror(char *s)
{
printf(" invalid expresion "); return 0;
}








output






[CSE@localhost ~]$ lex cal.l [CSE@localhost ~]$ yacc -d cal.y [CSE@localhost ~]$ cc lex.yy.c y.tab.c [CSE@localhost ~]$ ./a.out
Enter the expression: 5+3 answer=8

[cse@NFSSERVER ~]$ ./a.out Enter the expression:5+-5 answer=0

[cse@NFSSERVER ~]$ ./a.out Enter the expression:+5/ syntax error

