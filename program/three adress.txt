%{
#include <stdio.h> #include <string.h> #include "y.tab.h" extern int k;
%}


%%


[0-9]+ {
yylval.dval = yytext; return NUM;
}


\n { return 0; }
. { return yytext[0]; }
 

%%
PROGRAM NAME: Three.y
%{
#include <stdio.h> #include <stdlib.h> #include <string.h>

int k = 1;


int yylex(void);
void yyerror(const char* s);
char* gencode(char* first, char op, char* second);


%}


%union { char* dval;
}


%token <dval> NUM
%type <dval> E
%left '+' '-'
%left '*' '/' '%'


%%


statement : E { printf("\nt = %s\n", $1); }
;


E : E '+' E
{
$$ = gencode($1, '+', $3);
}
 
| E '-' E
{
$$ = gencode($1, '-', $3);
}
| E '%' E
{
$$ = gencode($1, '%', $3);
}
| E '*' E
{
$$ = gencode($1, '*', $3);
}
| E '/' E
{
$$ = gencode($1, '/', $3);
}
| '(' E ')'
{
$$ = $2;
}
| NUM
{
char temp[10]; sprintf(temp, "t%d", k); k++;
printf("%s = %s\n", temp, $1);
$$ = strdup(temp);
}
;


%%


char* gencode(char* first, char op, char* second) { char temp[10];
 
sprintf(temp, "t%d", k); k++;
printf("%s = %s %c %s\n", temp, first, op, second); return strdup(temp);
}


void yyerror(const char* s) { printf("\n%s\n", s);
}


int main() { yyparse(); return 0;
}


int yywrap() { return 1;
}
OUTPUT:
[CSE@localhost ~]$ lex lex.l [CSE@localhost ~]$ yacc -d yacc.y [CSE@localhost ~]$ gcc lex.yy.c y.tab.c [CSE@localhost ~]$ ./a.out
(2+3)*5 t1 = 2
t2 = 3

t3 = t1 + t2 t4 = 5
t5 = t3 * t4 t = t5
